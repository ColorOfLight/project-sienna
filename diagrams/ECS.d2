# TODO
# - handle game complete
# - reset the game
# - handle the shineness

direction: right

classes: {
  Entity: {
    width: 800
    style: {
      stroke-width: 0
      fill: "#FFD700" # orange yellow
      border-radius: 5
    }
  }

  Component: {
    width: 700
    style: {
      stroke-width: 0
      fill: "#44C7B1" # pastel green
      border-radius: 5
    }
  }

  System: {
    width: 1280
    style: {
      stroke-width: 0
      fill: "#87CEEB" # sky blue
      border-radius: 5
    }
  }

  ClientInterface: {
    width: 700
    style: {
      stroke-width: 0
      fill: "#FFA07A" # light salmon
      border-radius: 5
    }
  }
}

vars: {
  vGrUniformComponent: {
    class: Component
    shape: class
    label: GrUniformComponent

    + uniform_block_name: string
    + uniform_buffer_id: uint
  }

  vGrTextureComponent: {
    class: Component
    shape: class
    label: GrTextureComponent

    + texture_id: uint
    + name: string
    + width: int
    + height: int
  }

  vGrFramedTextureComponent: {
    label: GrFramedTextureComponent

    + framebuffer_id: uint
  }

  vGrFrom: {
    style: {
      stroke-dash: 3
    }
  }

  vTransformComponent: {
    class: Component
    shape: class
    label: TransformComponent

    + scale: Vec3
    + rotation: Quat
    + translation: Vec3
    + needs_update: bool
  }
}

# Entity & Components
PlayerEntity: {
  label: Player
  class: Entity

  BrushComponent: {
    class: Component
    shape: class

    + nozzle_fov: float
    + air_pressure: float
    + paint_color: Vec3
  }

  BrushGrUniformComponent: {
    ...${vGrUniformComponent}
  }

  BrushComponent -> BrushGrUniformComponent: data to {
    ...${vGrFrom}
  }

  GrBrushDepthTextureComponent: {
    ...${vGrTextureComponent}
    ...${vGrFramedTextureComponent}
  }

  CameraComponent: {
    class: Component
    shape: class

    + radius: float
    + theta: float
    + phi: float
    + fovy: float
    + needs_update: bool
  }

  CameraGrUniformComponent: {
    ...${vGrUniformComponent}
  }

  CameraComponent -> CameraGrUniformComponent: data to {
    ...${vGrFrom}
  }
}

PaintableEntity: {
  label: Paintable
  class: Entity

  TransformComponent: {
    ...${vTransformComponent}
  }

  MaterialComponent: {
    class: Component
    shape: class

    + material_type: "enum:PHONG"
  }
}

PaintablePartEntity: {
  label: PaintablePart
  class: Entity

  GrPaintedFramedTextureComponent: {
    ...${vGrTextureComponent}
    ...${vGrFramedTextureComponent}
  }

  TransformComponent: {
    ...${vTransformComponent}
  }

  TransformGrUniformComponent: {
    ...${vGrUniformComponent}
  }

  GeometryComponent: {
    class: Component
    shape: class

    + vertices: "vector<Vertex>"
    + indices: "vector<uint>"
  }

  GrGeometryComponent: {
    class: Component
    shape: class

    + vao_id: uint
    + vbo_id: uint
    + ebo_id: unit
    + vertex_count: int
  }

  TransformComponent -> TransformGrUniformComponent: data to {
    ...${vGrFrom}
  }

  GeometryComponent -> GrGeometryComponent: data to {
    ...${vGrFrom}
  }
}

Client: {
  label: Client (web browser)

  ClientInputComponent: {
    class: Component
    shape: class

    + pressedKeyMap: "{[W|A|S|D|R|F]: boolean}"
    + isPointerDown: boolean
    + pointerPosition: "[number, number]"
    + canvasSize: "[number, number]"
    + brush_airPreesure: number
    + brush_nozzleFov: number
    + brush_paintColor: "[number, number, number]"
  }

  ClientEventComponent: {
    class: Component
    shape: class

    + reset: boolean
    + changeCanvasSize: "[number, number]"
  }

  Canvas: {
    class: ClientInterface
    shape: class
  }

  ClientFunctions: {
    class: ClientInterface
    shape: class
  }
}

GameEntity: {
  label: Game
  class: Entity

  InputComponent: {
    class: Component
    shape: class

    + pressed_key_map: "struct {[enum:Key]: bool}"
    + is_pointer_down: bool
    + pointer_position: "[float, float]"
    + canvas_size: "[int, int]"
    + brush_input: BrushInput
  }

  EventComponent: {
    class: Component
    shape: class

    + reset: bool
    + change_canvas_size: bool
  }

  RenderConfigComponent: {
    class: Component
    shape: class

    + clear_color: Vec3
  }

  GrShaderManagerComponent: {
    class: Component
    shape: class

    - shader_program_ids: "uomap<ShaderType, unsigned int>"
    + getShaderProgram(ShaderType): unsigned int
  }
}

# Relationships
PaintablePartEntity -> PaintableEntity: included

# Systems
Systems: {
  description: |md
    - "Component" is omitted for parameters and return types
    - Return types will be turned into return parameters in real code
    - Relationships for GrSyncSystem are omitted for simplicity
  |

  ClientSyncSystem: {
    class: System
    shape: class

    + syncInput(ClientInput): Input
    + consumeEvent(ClientEvent): ClientEvent, Event
  }

  ManageSystem: {
    class: System
    shape: class

    + resetPaintedMap(Event, RenderConfig): "GrFramebuffer, Event"
  }

  InputSyncSystem: {
    class: System
    shape: class

    + syncBrush(Input): Brush
  }

  TransformSystem: {
    class: System
    shape: class

    + transformCamera(Input): Camera
    + transformPaintable(Input): Transform
  }

  GrSyncSystem: {
    class: System
    shape: class

    + updateGeometry(Geometry): GrGeometry
    + updateCameraUniform(Input, Camera): GrUniform
    + updateTransformUniform(Transform, Transform\[\]): GrUniform
    + updateBrushUniform(Brush, Input, Camera): GrUniform
  }

  PaintSystem: {
    class: System
    shape: class

    + updateBrushDepth(GrGeometry, GrShaderM, GrUniform, GrUniform, GrFramedTexture): GrFramedTexture
    + paint(GrGeometry, GrShaderM, GrUniform, GrUniform, GrFramedTexture): GrFramedTexture
  }

  RenderSystem: {
    class: System
    shape: class

    + initContext(RenderConfig): void
    + adjustViewportSize(Input, Event): Event
    + render(Material, GrShaderM, GrGeometry, GrUniform\[\], GrTexture): void
  }

  FeedbackSystem: {
    class: System
    shape: class
  }
}

# -- Relationships --#
# ClientSyncSystem
Client.ClientInputComponent -> Systems.ClientSyncSystem
Client.ClientEventComponent <-> Systems.ClientSyncSystem
Systems.ClientSyncSystem -> GameEntity.InputComponent
Systems.ClientSyncSystem -> GameEntity.EventComponent

# ManageSystem
Systems.ManageSystem <-> GameEntity.EventComponent
Systems.ManageSystem <- GameEntity.RenderConfigComponent
Systems.ManageSystem -> PaintablePartEntity.GrPaintedFramedTextureComponent

# InputSyncSystem
Systems.InputSyncSystem <- GameEntity.InputComponent
Systems.InputSyncSystem -> PlayerEntity.BrushComponent

# TransformSystem
Systems.TransformSystem <- GameEntity.InputComponent
Systems.TransformSystem -> PlayerEntity.CameraComponent
Systems.TransformSystem -> PaintableEntity.TransformComponent

# PaintSystem
Systems.PaintSystem <-> PaintablePartEntity.GrPaintedFramedTextureComponent
Systems.PaintSystem <-> PlayerEntity.GrBrushDepthTextureComponent
Systems.PaintSystem <- GameEntity.GrShaderManagerComponent
Systems.PaintSystem <- PaintablePartEntity.GrGeometryComponent
Systems.PaintSystem <- PaintablePartEntity.TransformGrUniformComponent
Systems.PaintSystem <- PlayerEntity.BrushGrUniformComponent

# RenderSystem
Client.Canvas <- Systems.RenderSystem
Systems.RenderSystem <- GameEntity.RenderConfigComponent
Systems.RenderSystem <- GameEntity.InputComponent
Systems.RenderSystem <-> GameEntity.EventComponent
Systems.RenderSystem -> PlayerEntity.CameraComponent
Systems.RenderSystem <- PaintablePartEntity.GrGeometryComponent
Systems.RenderSystem <- PlayerEntity.CameraGrUniformComponent
Systems.RenderSystem <- PaintablePartEntity.TransformGrUniformComponent
Systems.RenderSystem <- PaintablePartEntity.GrPaintedFramedTextureComponent
Systems.RenderSystem <- GameEntity.GrShaderManagerComponent
Systems.RenderSystem <- PaintableEntity.MaterialComponent

# FeedbackSystem
Client.ClientFunctions <- Systems.FeedbackSystem
